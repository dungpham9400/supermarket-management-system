package vn.com.project.services.finance.model;

import java.util.Calendar;
import java.util.Date;

import domainapp.basics.exceptions.ConstraintViolationException;
import domainapp.basics.model.meta.AttrRef;
import domainapp.basics.model.meta.DAttr;
import domainapp.basics.model.meta.DOpt;
import domainapp.basics.model.meta.DAttr.Type;
import domainapp.basics.model.meta.DClass;
import domainapp.basics.util.Tuple;
import vn.com.project.exceptions.DExCode;
import vn.com.project.utils.DToolkit;

@DClass(schema = "project")
public class Profit {
	@DAttr(name = "id", id = true, type = Type.String, auto = true, length = 6, mutable = false, optional = false)
	private String id;
	// static variable to keep track of product id
	private static int idCounter = 0;
	
	@DAttr(name="startDate", type = Type.Date, optional = false)
	private Date startDate;
	
	@DAttr(name="endDate", type = Type.Date, optional = false)
	private Date endDate;
	
	@DAttr(name="warehousingCost", type = Type.Long, length = 15, optional = false) 
	private Long warehousingCost;

	@DAttr(name="operatingExpense", type = Type.Long, length = 15, optional = false)
	private Long operatingExpense;
	
	@DAttr(name="revenue", type = Type.Long, length = 15, optional = false)
	private Long revenue;
	
	@DAttr(name="profit", type = Type.Long, auto = true, length = 15, mutable = false, optional=false, serialisable=false, derivedFrom= {"warehousingCost", "operatingExpense", "revenue"})
	private Long profit;
	
	public Profit(@AttrRef("startDate") Date startDate, @AttrRef("endDate") Date endDate, 
			@AttrRef("warehousingCost") Long warehousingCost, 
			@AttrRef("operatingExpense") Long operatingExpense,
			@AttrRef("revenue") Long revenue) {
		this(null, startDate, endDate, warehousingCost, operatingExpense, revenue);
	}
	
	public Profit(@AttrRef("id") String id,
			@AttrRef("startDate") Date startDate, @AttrRef("endDate") Date endDate,  
			@AttrRef("warehousingCost") Long warehousingCost, 
			@AttrRef("operatingExpense") Long operatingExpense,
			@AttrRef("revenue") Long revenue) throws ConstraintViolationException {
		this.id = nextID(id);
		this.startDate = startDate;
		this.endDate = endDate;
		this.warehousingCost = warehousingCost;
		this.operatingExpense = operatingExpense;
		this.revenue = revenue;
		
		updateProfit();
	}
	
	public String getId() {
		return id;
	}
	
	public Date getStartDate() {
		return startDate;
	}
	
	public Date getEndDate() {
		return endDate;
	}
	
	public Long getWarehousingCost() {
		return warehousingCost;
	}
	
	public Long getOperatingExpense() {
		return operatingExpense;
	}
	
	public Long getRevenue() {
		return revenue;
	}
	
	public Long getProfit() {
		return profit;
	}
	
	public void setStartDate(Date startDate) throws ConstraintViolationException {
		// additional validation on exp
		if (startDate.before(DToolkit.MIN_DATE)) {
			throw new ConstraintViolationException(DExCode.INVALID_DATE, startDate);
		}

		this.startDate = startDate;
	}
	
	public void setEndDate(Date endDate) throws ConstraintViolationException {
		// additional validation on exp
		if (endDate.before(DToolkit.MIN_DATE)) {
			throw new ConstraintViolationException(DExCode.INVALID_DATE, endDate);
		}

		this.endDate = endDate;
	}
	
	
	
	public void setWarehousingCost(Long warehousingCost) {
		this.warehousingCost = warehousingCost;
		updateProfit();
	}

	public void setOperatingExpense(Long operatingExpense) {
		this.operatingExpense = operatingExpense;
		updateProfit();
	}

	public void setRevenue(Long revenue) {
		this.revenue = revenue;
		updateProfit();
	}
	
	@DOpt(type=DOpt.Type.DerivedAttributeUpdater)
	@AttrRef(value="profit")
	public void updateProfit() {
		profit = revenue - warehousingCost - operatingExpense;
	}
	
	public String toString() {
		return "Profit: ";
	}
	
	private String nextID(String id) throws ConstraintViolationException {
		if (id == null) { // generate a new id
//			if (idCounter == 0) {
//				idCounter = Calendar.getInstance().get(Calendar.YEAR);
//			} else {
//				idCounter++;
//			}
			idCounter++;
			String stringIdCounter = String.format("%05d", idCounter);
			return "M" + stringIdCounter;
		} else {
			// update id
			int num;
			try {
				num = Integer.parseInt(id.substring(1));
			} catch (RuntimeException e) {
				throw new ConstraintViolationException(ConstraintViolationException.Code.INVALID_VALUE, e,
						new Object[] { id });
			}

			if (num > idCounter) {
				idCounter = num;
			}

			return id;
		}
	}

	@DOpt(type = DOpt.Type.AutoAttributeValueSynchroniser)
	public static void updateAutoGeneratedValue(DAttr attrib, Tuple derivingValue, Object minVal, Object maxVal)
			throws ConstraintViolationException {

		if (minVal != null && maxVal != null) {
			// TODO: update this for the correct attribute if there are more than one auto
			// attributes of this class

			String maxId = (String) maxVal;

			try {
				int maxIdNum = Integer.parseInt(maxId.substring(1));

				if (maxIdNum > idCounter) // extra check
					idCounter = maxIdNum;

			} catch (RuntimeException e) {
				throw new ConstraintViolationException(ConstraintViolationException.Code.INVALID_VALUE, e,
						new Object[] { maxId });
			}
		}
	}
	
	@Override
	  public int hashCode() {
	    final int prime = 31;
	    int result = 1;
	    result = prime * result + ((id == null) ? 0 : id.hashCode());
	    return result;
	  }
	  
	  @Override
	  public boolean equals(Object obj) {
	    if (this == obj)
	      return true;
	    if (obj == null)
	      return false;
	    if (getClass() != obj.getClass())
	      return false;
	    Profit other = (Profit) obj;
	    if (id == null) {
	      if (other.id != null)
	        return false;
	    } else if (!id.equals(other.id))
	      return false;
	    return true;
	  }
	
}
