package vn.com.project.services.product.model;

import domainapp.basics.model.meta.DAttr;

import java.util.Collection;

import domainapp.basics.exceptions.ConstraintViolationException;
import domainapp.basics.model.meta.AttrRef;
import domainapp.basics.model.meta.DAssoc;
import domainapp.basics.model.meta.DAttr.Type;
import domainapp.basics.util.Tuple;
import vn.com.project.services.employee.model.Employee;
import domainapp.basics.model.meta.DClass;
import domainapp.basics.model.meta.DOpt;
import domainapp.basics.model.meta.MetaConstants;
import domainapp.basics.model.meta.Select;
import domainapp.basics.model.meta.DAssoc.AssocEndType;
import domainapp.basics.model.meta.DAssoc.AssocType;
import domainapp.basics.model.meta.DAssoc.Associate;

@DClass(schema = "project")
public class Category {
	public static final String C_name = "name";

	@DAttr(name = "id", id = true, auto = true, length = 3, mutable = false, optional = false, type = Type.Integer)
	private int id;
	private static int idCounter;

	@DAttr(name = C_name, type = Type.String, length = 30, optional = true, cid = true)
	private String name;
	

	@DAttr(name="products",type=Type.Collection,optional = false,
		      serialisable=false,filter=@Select(clazz=Product.class))
		  @DAssoc(ascName="category-has-products",role="category",
		      ascType=AssocType.One2Many,endType=AssocEndType.One,
		    associate=@Associate(type=Product.class,cardMin=0,cardMax=50))
		  private Collection<Product> products; 
	
	private int productCount;

	// from object form: Employee is not included
	@DOpt(type = DOpt.Type.ObjectFormConstructor)
	@DOpt(type = DOpt.Type.RequiredConstructor)
	public Category(@AttrRef("name") String categoryName) {
		this(null, categoryName);
	}


	// based constructor (used by others)
	public Category(Integer id, String categoryName) {
		this.id = nextId(id);
		this.name = categoryName;
	}

	private static int nextId(Integer currID) {
		if (currID == null) {
			idCounter++;
			return idCounter;
		} else {
			int num = currID.intValue();
			if (num > idCounter)
				idCounter = num;

			return currID;
		}
	}
	
	/**
	   * @requires 
	   *  minVal != null /\ maxVal != null
	   * @effects 
	   *  update the auto-generated value of attribute <tt>attrib</tt>, specified for <tt>derivingValue</tt>, using <tt>minVal, maxVal</tt>
	   */
	  @DOpt(type=DOpt.Type.AutoAttributeValueSynchroniser)
	  public static void updateAutoGeneratedValue(
	      DAttr attrib,
	      Tuple derivingValue, 
	      Object minVal, 
	      Object maxVal) throws ConstraintViolationException {
	    
	    if (minVal != null && maxVal != null) {
	      //TODO: update this for the correct attribute if there are more than one auto attributes of this class 
	      int maxIdVal = (Integer) maxVal;
	      if (maxIdVal > idCounter)  
	        idCounter = maxIdVal;
	    }
	  }
	  
	  public int getId() {
	    return id;
	  }
	  
	  public String getName() {
	    return name;
	  }
	 

	  @DOpt(type=DOpt.Type.LinkAdder)
	  public boolean addProduct(Product p) {
		  if (!products.contains(p)) {
			  products.add(p);
		  }
		  return false;
	  }
	  
	  @DOpt(type=DOpt.Type.LinkAdderNew)
	  public boolean addNewProduct(Product p) {
		  products.add(p);
		  
		  productCount++;
		  
		  return false;
	  }
	  

	  
	  @DOpt(type=DOpt.Type.LinkAdderNew)
	  public boolean addNewProduct(Collection<Product> pds) {
		  products.addAll(pds);
		  productCount+=pds.size();
		  return false;
	  }
	  
	  @DOpt(type=DOpt.Type.LinkRemover)
	  public boolean removeProduct(Product p) {
		  boolean removed = products.remove(p);
		  
		  if (removed) {
			  productCount--;
		  }
		  return false;
	  }
	  
	  public void setProduct(Collection<Product> pd) {
		  this.products = pd;
		  productCount = pd.size();
	  }
	  
	  @DOpt(type=DOpt.Type.LinkCountGetter)
	  public Integer getProductCount() {
		  return productCount;
	  }
	  
	  @DOpt(type=DOpt.Type.LinkCountSetter)
	  public void setProductCount( int count) {
		  productCount = count;
	  }
	  
	  public void setName(String name) {
		  this.name = name;
	  }

	  @Override
	  public String toString() {
	    return name;
	  }
}
